// <auto-generated />
using System;
using FindDoctorInfra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FindDoctorInfra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250427214034_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FindDoctorDomain.Entities.DiaSemana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DiasSemana");
                });

            modelBuilder.Entity("FindDoctorDomain.Entities.Especialidade", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("FindDoctorDomain.Entities.Estabelecimento", b =>
                {
                    b.Property<string>("CodigoUnidade")
                        .HasColumnType("text");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodigoCNES")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Point>("Localizacao")
                        .IsRequired()
                        .HasColumnType("geometry (point)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SUS")
                        .HasColumnType("boolean");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CodigoUnidade");

                    b.ToTable("Estabelecimentos");
                });

            modelBuilder.Entity("FindDoctorDomain.Entities.HorarioFuncionamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoCNES")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DiaSemanaId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("HoraFim")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("HoraInicio")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CodigoCNES");

                    b.HasIndex("DiaSemanaId");

                    b.ToTable("HorariosFuncionamento");
                });

            modelBuilder.Entity("FindDoctorDomain.Entities.Profissional", b =>
                {
                    b.Property<string>("CO_Profissional")
                        .HasColumnType("text");

                    b.Property<string>("CNS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EspecialidadeId")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SUS")
                        .HasColumnType("boolean");

                    b.HasKey("CO_Profissional");

                    b.HasIndex("EspecialidadeId");

                    b.ToTable("Profissionais");
                });

            modelBuilder.Entity("FindDoctorDomain.Entities.ProfissionalEstabelecimento", b =>
                {
                    b.Property<string>("Id_CNES")
                        .HasColumnType("text");

                    b.Property<string>("Id_Profissional")
                        .HasColumnType("text");

                    b.Property<string>("EspecialidadeId")
                        .HasColumnType("text");

                    b.HasKey("Id_CNES", "Id_Profissional");

                    b.HasIndex("Id_Profissional");

                    b.ToTable("ProfissionalEstabelecimentos");
                });

            modelBuilder.Entity("FindDoctorDomain.Entities.HorarioFuncionamento", b =>
                {
                    b.HasOne("FindDoctorDomain.Entities.Estabelecimento", "Estabelecimento")
                        .WithMany("HorariosFuncionamento")
                        .HasForeignKey("CodigoCNES")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindDoctorDomain.Entities.DiaSemana", "DiaSemana")
                        .WithMany("Horarios")
                        .HasForeignKey("DiaSemanaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaSemana");

                    b.Navigation("Estabelecimento");
                });

            modelBuilder.Entity("FindDoctorDomain.Entities.Profissional", b =>
                {
                    b.HasOne("FindDoctorDomain.Entities.Especialidade", "Especialidade")
                        .WithMany("Profissionais")
                        .HasForeignKey("EspecialidadeId");

                    b.Navigation("Especialidade");
                });

            modelBuilder.Entity("FindDoctorDomain.Entities.ProfissionalEstabelecimento", b =>
                {
                    b.HasOne("FindDoctorDomain.Entities.Estabelecimento", "Estabelecimento")
                        .WithMany("Profissionais")
                        .HasForeignKey("Id_CNES")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindDoctorDomain.Entities.Profissional", "Profissional")
                        .WithMany("Estabelecimentos")
                        .HasForeignKey("Id_Profissional")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estabelecimento");

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("FindDoctorDomain.Entities.DiaSemana", b =>
                {
                    b.Navigation("Horarios");
                });

            modelBuilder.Entity("FindDoctorDomain.Entities.Especialidade", b =>
                {
                    b.Navigation("Profissionais");
                });

            modelBuilder.Entity("FindDoctorDomain.Entities.Estabelecimento", b =>
                {
                    b.Navigation("HorariosFuncionamento");

                    b.Navigation("Profissionais");
                });

            modelBuilder.Entity("FindDoctorDomain.Entities.Profissional", b =>
                {
                    b.Navigation("Estabelecimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
